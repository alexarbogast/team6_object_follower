#!/usr/bin/env python

import rospy
import rospkg
import numpy as np
from cv_bridge import CvBridge
from sensor_msgs.msg import CompressedImage

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.externals import joblib


from team6_image_classifier.srv import Classify
from team6_image_classifier import BGR2GrayTransformer, HogTransformer, ResizeTransformer

# temp
from matplotlib import pyplot as plt


class ImageNode:

	def __init__(self):

		classifier_path = rospy.get_param('~classifier', 'sgdclassifier.pkl')

		if len(classifier_path) > 0 and classifier_path[0] != '/':
			filepath = rospkg.RosPack().get_path('team6_image_classifier') + '/data/classifier/' + classifier_path
		
		self.classifier = joblib.load(filepath)
		self.classifier.steps.insert(0, ['sizeify', ResizeTransformer(width=64, height=128)])
		
		self.label_map = {0: 'empty_wall', 1: 'left', 2: 'right',
						  3: 'do not enter', 4: 'stop', 5: 'goal'}
		
		self.bridge = CvBridge()
		self.image_subscriber = rospy.Subscriber('/raspicam_node/image/compressed', CompressedImage, self.ImageCallback, queue_size=10)
		
		print('Waiting for classifier service to come up...')
		rospy.wait_for_service('/classifier_node/classify')
		self.classify_client = rospy.ServiceProxy('/classifier_node/classify', Classify)

	def ImageCallback(self, data):
		image = np.array(self.bridge.compressed_imgmsg_to_cv2(data, "bgr8"))
		data = np.array([image])

		classification = self.classifier.predict(data)
		#feature_vector = self.feature_extractor.transform(data)
		#classification = self.classify_client(feature_vector[0].tolist())
		rospy.loginfo("Classified image as:   {0}".format(self.label_map[classification[0]]))


if __name__=="__main__":
	rospy.init_node('image_node', anonymous=False)
	
	try:
		image_node = ImageNode()

		rospy.loginfo('Image node initialized')
		rospy.spin()
	except rospy.ROSInterruptException:
		pass	