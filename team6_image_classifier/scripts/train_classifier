#!/usr/bin/env python

import rospy
import cv2
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn import metrics

from team6_image_classifier import BGR2GrayTransformer, HogTransformer
from team6_image_classifier import utilities

def train_classifier(src, visualize=False):
	"""
	Parameter
	---------
	src: str
		filepath to folder containing images and label file
	vis_dist: bool
		visualize the training and test distribution
	"""

	# load data and labels key
	data = utilities.load_img_data(src, width=64, height=128)
	data, label = np.array(data['data']), np.array(data['label'])

	rospy.loginfo("Imported {0} data instances".format(data.shape[0]))

	# shuffle data and split into training + test
	split = 0.4
	data_train, data_test, label_train, label_test = train_test_split(
		data, 
		label,
		test_size=split,
		shuffle=True,
		random_state=43
	)

	if (visualize):
		utilities.plot_train_test_bar(label_train, label_test)		

	# =========== SGD Pipeline ================
	#HOG_pipeline = Pipeline([
	#('grayify', BGR2GrayTransformer()),
	#('hogify', HogTransformer(
	#	pixels_per_cell=(14, 14), 
	#	cells_per_block=(2, 2), 
	#	orientations=9, 
	#	block_norm='L2-Hys')
	#),
	#('scalify', StandardScaler()),
	#('classify', SGDClassifier(random_state=42, max_iter=1000, tol=1e-3))
	#])

	# ============= SVM pipeline ==============
	HOG_pipeline = Pipeline([
	('grayify', BGR2GrayTransformer()),
	('hogify', HogTransformer(
		pixels_per_cell=(14, 14), 
		cells_per_block=(2, 2), 
		orientations=9, 
		block_norm='L2-Hys')
	),
	('scalify', StandardScaler()),
	('classify', svm.SVC(kernel='linear'))
	])


	# ================= train =================
	rospy.loginfo('Training Classifier')
	classified_train = HOG_pipeline.fit(data_train, label_train)

	#foo, viz = hogify.visualize(gray_train[3])
	#cv2.imshow('HOG', viz)
	#cv2.waitKey(0)
	#cv2.destroyAllWindows()

	# =============== evaluate ================
	predicted = HOG_pipeline.predict(data_test)
	rospy.loginfo('\n' + metrics.classification_report(label_test, predicted))
	conf_mtx = metrics.confusion_matrix(label_test, predicted)
	rospy.loginfo('\n' + str(conf_mtx))
	utilities.plot_confusion_matrix(conf_mtx)

	return HOG_pipeline

def main():
	rospy.init_node('train_classifier')

	filepath = '/home/alex/Desktop/new_images'
	trained_model = train_classifier(filepath, visualize=True)

	utilities.save_model(trained_model, 'newsvmclassifier.pkl')

if __name__ == '__main__':
	try:
		main()
	except rospy.ROSInterruptException:
		pass