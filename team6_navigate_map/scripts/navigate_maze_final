#!/usr/bin/env python

############################################################
# navigate_map node: moves the turtle bot to waypoints 
# while navigating through map 
############################################################

from operator import index
import rospy
import numpy as np
import actionlib

from enum import Enum

from geometry_msgs.msg import *
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalStatus
from rospy.client import init_node
from sensor_msgs.msg import LaserScan
from std_msgs.msg import Byte

class Navigator:
	def __init__(self):
		self.move_base = actionlib.SimpleActionClient('move_base', MoveBaseAction)
		self.move_base.wait_for_server()

	def _SetHeader(self, goal):
		goal.target_pose.header.stamp = rospy.Time.now()
		goal.target_pose.header.frame_id = "map"
		return goal

	def Navigate(self, waypoint):
		current_waypoint = self._SetHeader(waypoint)
		
		rospy.loginfo("Current Goal:")
		rospy.loginfo(current_waypoint)
		
		self.move_base.send_goal(current_waypoint)	
		success = self.move_base.wait_for_result(rospy.Duration(60))
		state = self.move_base.get_state()
		
		if success and state == GoalStatus.SUCCEEDED:
			rospy.loginfo(self.move_base.get_goal_status_text)
		else:
			rospy.loginfo(self.move_base.get_goal_status_text)
			self.move_base.cancel_goal()
			rospy.logerr("Did not reach goal... exiting")
		
		return success

class Waypoint2D(MoveBaseGoal):
	def __init__(self, pos, orient):
		waypoint = PoseStamped()
			
		pos = Point(pos[0], pos[1], 0)
		orient = Quaternion(orient[0], orient[1], orient[2], orient[3])

		waypoint.pose.position, waypoint.pose.orientation = pos, orient
		self.target_pose = waypoint


class GridMap:
	class Direction(Enum):
		RIGHT, LEFT, BACKWARD, FORWARD = 0, 1, 2, 3

	class Cardinal(Enum):
		NORTH, EAST, SOUTH, WEST = 0, 1, 2, 3

		def CW(cardinal):
			return GridMap.Cardinal((cardinal.value + 1) % 4)

		def CCW(cardinal):
			return GridMap.Cardinal((cardinal.value - 1) % 4)

		def BACK(cardinal):
			return GridMap.Cardinal((cardinal.value + 2) % 4)

	# cardinal2quaternion lookup table
	# index with Cardinal (NESW) to get Quaternion
	card2quat = [(0, 0, 0, 1), 
			 	 (0, 0, -0.7071068, 0.7071068),
			 	 (0, 0, 1, 0),
			 	 (0, 0, 0.7071068, 0.7071068)]

	# maps a commanded direction + current orientation --> increments (x, y)
	# increment_map[Direction, Cardinal]  
	increment_map = [[( 0, 1), ( 1, 0), ( 0,-1), (-1, 0)],
				 	 [( 0,-1), (-1, 0), ( 0, 1), ( 1, 0)], 
				 	 [( 1, 0), ( 0,-1), (-1, 0), ( 0, 1)],
				 	 [(-1, 0), ( 0, 1), ( 1, 0), ( 0,-1)]]

	def __init__(self, init_pose, init_orient):
		#maxx = 3.3 maxy = 0.6
		#self.GCx = np.linspace(3.7, -.75, 6)
		self.GCx=np.matrix('3.7 3.7 3.71;2.8 2.72 2.85;1.78 1.8 2;0.81 .95 1.01;-.1 0.125 0.08;-0.86 -0.98 -0.98')
		#self.GCy = np.linspace(0.9, -1, 3)
		self.GCy=np.matrix('1 -.3 -.9; 1.1 .077 -.95; .86 0 -.91; .92 .05 -1.04; .83 .076 -.96; .89 -.065 -1.05')

		self._localize(init_pose, init_orient)

	def _localize(self, init_pose, init_orient):
		init_pose = np.array(init_pose)
		init_orient = np.array(init_orient)

		# find location
		(mini, minj) = (0, 0)
		min_dist = 100
		for i in range(np.size(self.GCx,axis=0)):
			for j in range(np.size(self.GCy,axis=1)):
				pose = np.array([self.GCx[i,j], self.GCy[i,j]])
				norm = np.linalg.norm(pose - init_pose)
				if norm < min_dist:
					(mini, minj) = (i, j)
					min_dist = norm

		self.index = (mini, minj)

		# find orientation
		mini = 0
		min_dist = 100
		for i in range(len(GridMap.card2quat)):
			orient = np.array(GridMap.card2quat[i])
			
			norm = np.linalg.norm(orient - init_orient)
			if norm < min_dist:
				mini = i
				min_dist = norm

		self.dir = GridMap.Cardinal(mini)

		#rospy.loginfo(self.index)
		#rospy.loginfo(self.dir)

	def update_index(self, direction):
		inc_x, inc_y = GridMap.increment_map[direction.value][self.dir.value]

		potential_x, potential_y = self.index
		potential_x += inc_x
		potential_y += inc_y

		# prevent overflow
		if (not np.size(self.GCx,axis=0) - potential_x <=0):
			self.index = (potential_x, self.index[1])
		if (not np.size(self.GCy,axis=1) - potential_y <=0):
			self.index = (self.index[0], potential_y)

	def globalpose(self):
		x = self.GCx[self.index[0],self.index[1]]
		y = self.GCy[self.index[0],self.index[1]]
		orient = GridMap.card2quat[self.dir.value]
		return ((x, y), orient)

	def right(self):
		#self.update_index(GridMap.Direction.RIGHT)
		self.dir = GridMap.Cardinal.CW(self.dir)

	def left(self):
		#self.update_index(GridMap.Direction.LEFT)
		self.dir = GridMap.Cardinal.CCW(self.dir)

	def forward(self):
		self.update_index(GridMap.Direction.FORWARD)

	def backward(self):
		self.update_index(GridMap.Direction.BACKWARD)
		self.dir = GridMap.Cardinal.BACK(self.dir)


class Lidar:
	def __init__(self):
		#self._twist = Twist()
		self.wall_status = 1

		self.lidar_sub = rospy.Subscriber("/scan", LaserScan, self.LidarCallback, queue_size=10)
		#self._vel_pub = rospy.Publisher('cmd_vel', Twist, queue_size = 10)

	def LidarCallback(self, lidar_data):
		pause = False
		min_distance = self.parse_distances(lidar_data)
		self.wall_status = self.check_for_wall(min_distance)
		
		if pause:
			rospy.sleep(10)	

	def check_for_wall(self, min_distance, distance_thresh=0.8): #is there a wall or empty block in front of us?
		if min_distance>distance_thresh:
			wall_status = 0 #there is not a wall in front of us
		else:
			wall_status = 1 #there is a wall in front of us

		return wall_status

	def parse_distances(self, lidar_data, heading=0):
		HEADING_THRESH=10

	#		try:
		heading_range = np.array(range(int(heading) - HEADING_THRESH, 
									int(heading) + HEADING_THRESH + 1))

		## wrap angles
		lidar_ang = heading_range % 360		
		lidar_ang = (lidar_ang + 360) % 360 # force positive 

		lidar_ang = [ang-360 if ang > 180 else ang for ang in lidar_ang]

		dists = [lidar_data.ranges[i] for i in lidar_ang]
		filtered_dists=[]
		for point in dists:
			point = 1000 if point == 0 else point
			filtered_dists.append(point)

		min_dist = np.min(filtered_dists)

		return min_dist


class Executor:
	def __init__(self):
		self.lidar_sub = Lidar()

		# initialize map
		current_pos = rospy.wait_for_message("/amcl_pose", PoseWithCovarianceStamped)
		
		initpos = current_pos.pose.pose.position
		initorient = current_pos.pose.pose.orientation
		
		initpos = (initpos.x, initpos.y)
		initorient = (initorient.x, initorient.y, initorient.z, initorient.w)

		self.grid_map = GridMap(initpos, initorient)
		print(self.grid_map.index)

		self.label_map = {0: 'empty_wall', 1: 'left', 2: 'right',
						  3: 'do not enter', 4: 'stop', 5: 'goal'}

		# create navigator
		self.nav = Navigator()

	def execute(self):

		rospy.sleep(1)
		# check for wall
		if not self.lidar_sub.wall_status: # no wall
			self.grid_map.forward()
			pose, orient = self.grid_map.globalpose()
			waypoint = Waypoint2D(pose, orient)

		else:
			rospy.sleep(5)
			sign_type = rospy.wait_for_message('/classified_image', Byte)
			sign_type = self.label_map[sign_type.data]

			rospy.loginfo(sign_type)

			if (sign_type == 'empty_wall'): 	 # try again next iteration
				rospy.loginfo('YOU SUCK')
				waypoint = None
			else:								 # we found a sign
				if (sign_type == 'right'):
					self.grid_map.right()
				elif (sign_type == 'left'):
					self.grid_map.left()
				elif (sign_type == 'do not enter'):
					self.grid_map.backward()
				elif (sign_type == 'stop'):
					self.grid_map.backward()
				elif (sign_type == 'goal'):
					rospy.loginfo('YOU DONT SUCK')

				pose, orient = self.grid_map.globalpose()
				waypoint = Waypoint2D(pose, orient)
		
		if not waypoint == None:
			self.nav.Navigate(waypoint)

	def test(self):
		self.grid_map.right()
		pose, orient = self.grid_map.globalpose()
		waypoint = Waypoint2D(pose, orient)

		self.nav.Navigate(waypoint)
		rospy.loginfo("Traveling to: {0}".format(waypoint))

		self.grid_map.forward()
		pose, orient = self.grid_map.globalpose()
		waypoint = Waypoint2D(pose, orient)
		
		self.nav.Navigate(waypoint)
		rospy.loginfo("Traveling to: {0}".format(waypoint))

		self.grid_map.forward()
		pose, orient = self.grid_map.globalpose()
		waypoint = Waypoint2D(pose, orient)
		
		self.nav.Navigate(waypoint)
		rospy.loginfo("Traveling to: {0}".format(waypoint))

		self.grid_map.left()
		pose, orient = self.grid_map.globalpose()
		waypoint = Waypoint2D(pose, orient)
		
		self.nav.Navigate(waypoint)
		rospy.loginfo("Traveling to: {0}".format(waypoint))

		self.grid_map.forward()
		pose, orient = self.grid_map.globalpose()
		waypoint = Waypoint2D(pose, orient)
		
		self.nav.Navigate(waypoint)
		rospy.loginfo("Traveling to: {0}".format(waypoint))
		
		

if __name__=='__main__':
	rospy.init_node('navigate_maze_final', anonymous=False)


	#nav = Navigator()
	#map = GridMap((0.4, 0.1), (0, 0, 0.7071068, 0.7071068))
	#pose, orient = map.globalpose()

	try:
		exec_test = Executor()

		while (not rospy.is_shutdown()):
			exec_test.execute()

	except rospy.ROSInterruptException:
		pass